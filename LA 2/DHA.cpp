/* This program calculates the Key for two persons
using the Diffie-Hellman Key exchange algorithm using C++ */
#include <cmath>
#include <iostream>

using namespace std;

// Power function to return value of a ^ b mod P
long long int power(long long int a, long long int b, long long int P) {
    if (b == 1)
        return a % P;  // Ensure it returns modulo P
    
    return (((long long int)pow(a, b)) % P);
}

// Driver program
int main() {
    long long int P, G, x, a, y, b, ka, kb;

    // Taking user input for public keys
    cout << "Enter a prime number P: ";
    cin >> P;

    cout << "Enter a primitive root G for P: ";
    cin >> G;

    // Taking user input for Alice's private key
    cout << "Enter the private key a for Alice: ";
    cin >> a;

    x = power(G, a, P); // Gets the generated public key for Alice
    cout << "Public key generated by Alice (x) = G^a % P = " << x << endl;

    // Taking user input for Bob's private key
    cout << "Enter the private key b for Bob: ";
    cin >> b;

    y = power(G, b, P); // Gets the generated public key for Bob
    cout << "Public key generated by Bob (y) = G^b % P = " << y << endl;

    // Generating the secret key after the exchange of keys
    ka = power(y, a, P); // Secret key for Alice
    kb = power(x, b, P); // Secret key for Bob
    
    cout << "Secret key for Alice is : " << ka << endl;
    cout << "Secret key for Bob is : " << kb << endl;

    // Verify that both secret keys match
    if (ka == kb) {
        cout << "Shared secret key successfully generated: " << ka << endl;
    } else {
        cout << "Error: Shared secret keys do not match!" << endl;
    }

    return 0;
}
